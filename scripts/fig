#!/usr/bin/python3
import matplotlib.pyplot as plt
import os
import argparse
import numpy as np
from matplotlib.ticker import FuncFormatter
import collections

result_dir = "result"
# lock type
lock_types = {
    "TTS": "Test And Test And Set",
    "TL": "Ticket Lock",
    "RW": "Reader Writer Lock",
    "M": "Mutex",
    "AL": "Array Lock",
    "TS": "Test And Set",
}

op_types = {
    "w": "write",
    "r": "read",
}

results = collections.defaultdict(lambda: {
    "TTS": {
        "w": None,
        "r": None,
    }, "TL": {
        "w": None,
        "r": None,
    }, "RW": {
        "w": None,
        "r": None,
    }, "M": {
        "w": None,
        "r": None,
    }, "AL": {
        "w": None,
        "r": None,
    }, "TS": {
        "w": None,
        "r": None,
    }
})

line_style = {"write": "-", "read": "--"}

global_min = np.finfo(np.float64).max
global_max = np.finfo(np.float64).min
files = os.listdir(result_dir)
for file in files:
    split = file.split("-")
    lock_type = split[0]
    op_type = split[1]
    config_hash = "-".join(split[2:])
    data = np.loadtxt(f'{result_dir}/{file}')
    if len(data) == 0:
        os.system(f'rm {result_dir}/{file}')
        continue
    results[config_hash][lock_type][op_type] = data


def cdf(fig_output_dir: str):
    fig_x = 2
    fig_y = 3
    if not os.path.exists(fig_output_dir):
        os.makedirs(fig_output_dir)
    for config_hash, lock_results in results.items():
        fig, axs = plt.subplots(fig_x, fig_y, figsize=(10, 7))
        fig.suptitle(f'Normalized Lock Performance CDF\n({config_hash})')
        for i, (lock_type, op_results) in enumerate(lock_results.items()):
            lock_type = lock_types[lock_type]
            _axs = axs[i // fig_y, i % fig_y]
            _axs.yaxis.set_major_formatter(
                FuncFormatter(lambda x, y: f'{x:.2}'))
            _axs.set_title(f"{lock_type}")
            for op_type, data in op_results.items():
                if data is None:
                    continue
                op_type = op_types[op_type]
                # normalized
                data = (data - np.mean(data)) / np.std(data)
                # plot CDF
                counts, bin_edges = np.histogram(data, bins=1000, density=True)
                cdf = np.cumsum(counts) / np.sum(counts)
                _axs.plot(
                    bin_edges[1:], cdf, linestyle=line_style[op_type], drawstyle='steps', label=op_type)
            _axs.legend()
        fig.savefig(f'{fig_output_dir}/{config_hash}.png', dpi=300)
        plt.close(fig)


def pdf(fig_output_dir: str):
    if not os.path.exists(fig_output_dir):
        os.makedirs(fig_output_dir)

    # group the result by lock type
    lock_results = dict()
    for config_hash, value in results.items():
        thread_cnt = config_hash.split("-")[0].split("_")[1]
        config_hash = "-".join(config_hash.split("-")[1:])
        for lock_type, op_results in value.items():
            lock_type = lock_types[lock_type]
            if lock_type not in lock_results:
                lock_results[lock_type] = dict()
            if config_hash not in lock_results[lock_type]:
                lock_results[lock_type][config_hash] = dict()
            if thread_cnt not in lock_results[lock_type][config_hash]:
                lock_results[lock_type][config_hash][thread_cnt] = None
            lock_results[lock_type][config_hash][thread_cnt] = op_results

    fig_x = 4
    fig_y = 6
    for lock_type, config_results in lock_results.items():
        read_fig, read_axs = plt.subplots(fig_x, fig_y, figsize=(20, 14),
                                          sharex=True, sharey=True)
        read_fig.suptitle(f'Read Performance PDF\n{lock_type}')

        write_fig, write_axs = plt.subplots(fig_x, fig_y, figsize=(20, 14),
                                            sharex=True, sharey=True)
        write_fig.suptitle(f'Write Performance PDF\n{lock_type}')

        total_fig, total_axs = plt.subplots(fig_x, fig_y, figsize=(20, 14),
                                            sharex=True, sharey=True)
        total_fig.suptitle(f'Read and Write Performance PDF\n{lock_type}')

        for i, (config_hash) in enumerate(sorted(config_results)):
            thread_results = config_results[config_hash]
            r_axs = read_axs[i // fig_y, i % fig_y]
            r_axs.set_yscale("log")
            r_axs.set_xscale("log")
            r_axs.set_title(f"{config_hash}")

            w_axs = write_axs[i // fig_y, i % fig_y]
            w_axs.set_yscale("log")
            w_axs.set_xscale("log")
            w_axs.set_title(f"{config_hash}")

            t_axs = total_axs[i // fig_y, i % fig_y]
            t_axs.set_yscale("log")
            t_axs.set_xscale("log")
            t_axs.set_title(f"{config_hash}")

            for thread_cnt in sorted(thread_results):
                op_results = thread_results[thread_cnt]
                r_axs.hist(op_results["r"], bins=50, alpha=0.5, density=True,
                           label=f"{thread_cnt} threads")
                r_axs.legend()

                w_axs.hist(op_results["w"], bins=50, alpha=0.5, density=True,
                           label=f"{thread_cnt} threads")
                w_axs.legend()

                t_axs.hist(np.concatenate((op_results["r"], op_results["w"])),
                           bins=50, alpha=0.5, density=True, label=f"{thread_cnt} threads")
                t_axs.legend()

        read_fig.savefig(
            f'{fig_output_dir}/{lock_type}_read.png', dpi=300)
        write_fig.savefig(
            f'{fig_output_dir}/{lock_type}_write.png', dpi=300)
        total_fig.savefig(
            f'{fig_output_dir}/{lock_type}_total.png', dpi=300)
        plt.close(read_fig)


def bar(fig_output_dir: str):
    if not os.path.exists(fig_output_dir):
        os.makedirs(fig_output_dir)
    for config_hash, lock_results in results.items():
        fig, axs = plt.subplots(1, 2, figsize=(10, 7))
        w_mean = [np.mean(lock_results[key]["w"]) for key in lock_results]
        w_std = [np.std(lock_results[key]["w"]) for key in lock_results]

        r_mean = [np.mean(lock_results[key]["r"]) for key in lock_results]
        r_std = [np.std(lock_results[key]["r"]) for key in lock_results]

        # Set the position of the bars on the x-axis
        bar_width = 0.35
        write_x = np.arange(len(w_mean))
        read_x = [x + bar_width for x in write_x]

        axs[0].bar(write_x, w_mean, width=bar_width,
                   edgecolor='white', label='write')
        axs[0].bar(read_x, r_mean, width=bar_width,
                   edgecolor='white', label='read')
        axs[0].set_title(f"Mean Lock Acquisition Time\n({config_hash})")
        axs[1].bar(write_x, w_std, width=bar_width,
                   edgecolor='white', label='write')
        axs[1].bar(read_x, r_std, width=bar_width,
                   edgecolor='white', label='read')
        axs[1].set_title(
            f"Standard Deviation of Lock Acquisition Time\n({config_hash})")

        axs[0].legend()
        axs[0].set_xlabel('Lock Type')
        axs[0].set_yscale('log', base=10, subs=(1.0,))
        axs[0].set_xticks([r + bar_width/2 for r in range(len(w_mean))],
                          lock_results.keys())
        axs[1].legend()
        axs[1].set_xlabel('Lock Type')
        axs[1].set_yscale('log', base=10, subs=(1.0,))
        axs[1].set_xticks([r + bar_width/2 for r in range(len(w_mean))],
                          lock_results.keys())
        axs[0].set_ylabel('Nanosecond')
        fig.savefig(f'{fig_output_dir}/{config_hash}.png', dpi=300)
        plt.close(fig)


def scale(fig_output_dir: str):
    if not os.path.exists(fig_output_dir):
        os.makedirs(fig_output_dir)
    thread_results = dict()
    for config_hash, lock_results in results.items():
        thread_cnt = config_hash.split("-")[0].split("_")[1]
        config_hash = "-".join(config_hash.split("-")[1:])
        if config_hash not in thread_results:
            thread_results[config_hash] = dict()
        thread_results[config_hash][thread_cnt] = lock_results

    graph_y = dict()
    for config_hash, value in thread_results.items():
        graph_y[config_hash] = {}
        for thread_cnt in sorted(value):
            lock_results = value[thread_cnt]
            for lock_type, op_results in lock_results.items():
                if lock_type not in graph_y[config_hash]:
                    graph_y[config_hash][lock_type] = dict({"w": [], "r": []})
                for op_type, data in op_results.items():
                    if data is None:
                        continue
                    graph_y[config_hash][lock_type][op_type].append(
                        np.mean(data))

    fig_x = 2
    fig_y = 3
    if not os.path.exists(fig_output_dir):
        os.makedirs(fig_output_dir)
    for config_hash, lock_results in graph_y.items():
        fig, axs = plt.subplots(fig_x, fig_y, figsize=(
            10, 7), sharex=True, sharey=True)
        fig.suptitle(f'Lock Performance at Different Scale\n({config_hash})')
        for i, (lock_type, op_results) in enumerate(lock_results.items()):
            lock_type = lock_types[lock_type]
            _axs = axs[i // fig_y, i % fig_y]
            _axs.yaxis.set_major_formatter(
                FuncFormatter(lambda x, y: f'{x:.2}'))
            _axs.set_title(f"{lock_type}")
            for op_type, data in op_results.items():
                op_type = op_types[op_type]
                if data is None:
                    continue
                _axs.plot([1, 2, 4, 8], data,
                          linestyle=line_style[op_type], label=op_type)
            _axs.set_yscale('log', base=10, subs=(1.0,))
            _axs.legend(loc='lower right')
        fig.text(0.5, 0.04, 'Thread Count', ha='center')
        fig.text(0.04, 0.5, 'Nanosecond', va='center', rotation='vertical')
        fig.savefig(f'{fig_output_dir}/{config_hash}.png', dpi=300)
        plt.close(fig)


parser = argparse.ArgumentParser()
parser.add_argument(
    "fig", help="the figure to generate, can be one of: pdf, cdf, bar, scale")
args = parser.parse_args()
figs = args.fig.split()
for fig in figs:
    if fig == "pdf":
        pdf("fig/pdf")
    elif fig == "cdf":
        cdf("fig/cdf")
    elif fig == "scale":
        scale("fig/scale")
    elif fig == "bar":
        bar("fig/bar")
    else:
        print(f"Unknown figure type: {fig}")
